#!/usr/bin/env python3
"""Generate configs for mail tools from Gmail accounts.

Reads account data from system keyring Gmail IMAP accounts.
Produces configuration for tools:
  - mbsync
  - msmtp
"""

import argparse
import os
import sys
from typing import IO, Iterable

import jinja2
import keyring


class Account(object):
    def __init__(self, user, host):
        self.user = user
        self.slug = user.split('@')[1].split('.')[-2]
        self.host = host
        self.mailboxes = [
            ('inbox', 'INBOX'),
            ('sent', '[Gmail]/Sent Mail'),
            ('drafts', '[Gmail]/Drafts'),
            ('archive', '[Gmail]/All Mail'),
            ('spam', '[Gmail]/Spam'),
            ('trash', '[Gmail]/Trash'),
        ]


def getAccounts(accountsFile: IO, keyring: keyring.core.backend.KeyringBackend) -> Iterable:
    accounts = []
    for line in accountsFile.readlines():
        account = line.strip()
        c = keyring.get_credential('gmail.com', account)
        if c:
            accounts += [Account(c.username, 'gmail.com')]
    return accounts


def render(accountsList: list, template: jinja2.Template) -> str:
    return template.render(accounts=accountsList)


def getKeyring():
    try:
        k = keyring.get_keyring()
    except AttributeError:
        print("Woah buddy, this shouldn't happen if you're using the correct "
              "backend ({})".format(KEYRING_BACKEND))
        raise
    except keyring.errors.InitError as e:
        print("Could not load keyring {}: {}".format(KEYRING_BACKEND, e))
    else:
        return k


def main():
    parser = argparse.ArgumentParser(
        description='Generate config for mail tools from Gmail accounts')
    parser.add_argument(
        '--output', default=sys.stdout, type=argparse.FileType('w'),
        help='the file where the config should be written')
    parser.add_argument(
        '--accounts', default=sys.stdin, type=argparse.FileType('r'),
        help='the file where the accounts will be read, one per line')
    args = parser.parse_args()
    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader(os.path.dirname(__file__)),
        trim_blocks=True,
        lstrip_blocks=True)

    templates = {
        'genmbsyncrc': 'mbsyncrc.j2',
        'genmsmtprc': 'msmtprc.j2',
    }
    template = templates.get(parser.prog, None)
    if not template:
        raise RuntimeError("$0=%s; don't know how to do that" % parser.prog)

    accountsList = getAccounts(args.accounts, getKeyring())
    if not accountsList:
        sys.exit(-1)
    args.output.write(render(accountsList=accountsList,
                             template=env.get_template(template)))


if __name__ == '__main__':
    main()
