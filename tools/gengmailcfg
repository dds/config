#!/usr/bin/env python3
"""Generate configs for mail tools from Gmail accounts.

Reads account data from system keyring Gmail IMAP accounts.
Produces configuration for tools:
  - mbsync
  - msmtp
"""

import argparse
import os
import sys
from typing import Iterable

import jinja2
import keyring
import secretstorage

KEYRING_BACKEND = keyring.backends.SecretService.Keyring


class Account(object):
    def __init__(self, user, host):
        self.user = user
        self.slug = user.split('@')[1].split('.')[-2]
        self.host = host
        self.mailboxes = [
            ('inbox', 'INBOX'),
            ('sent', '[Gmail]/Sent Mail'),
            ('drafts', '[Gmail]/Drafts'),
            ('archive', '[Gmail]/All Mail'),
            ('spam', '[Gmail]/Spam'),
            ('trash', '[Gmail]/Trash'),
        ]


def getAccounts(collection: secretstorage.collection.Collection) -> Iterable:
    for i in collection.search_items({'service': 'imap.gmail.com'}):
        a = i.get_attributes()
        if '@' in a.get('username', ''):
            yield Account(a.get('username'), a.get('service'))


def generate(template: jinja2.Template) -> str:
    c = keyring.get_keyring().get_preferred_collection()
    return template.render(accounts=list(getAccounts(c)))


def main():
    parser = argparse.ArgumentParser(
        description='Generate config for mail tools from Gmail accounts')
    parser.add_argument(
        '--output', default=sys.stdout, type=argparse.FileType('w'),
        help='the file where the config should be written')
    args = parser.parse_args()
    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader(os.path.dirname(__file__)),
        trim_blocks=True,
        lstrip_blocks=True)

    templates = {
        'genmbsyncrc': 'mbsyncrc.j2',
        'genmsmtprc': 'msmtprc.j2',
    }
    template = templates.get(parser.prog, None)
    if not template:
        raise RuntimeError("$0=%s; don't know how to do that" % parser.prog)

    args.output.write(generate(template=env.get_template(template)))


if __name__ == '__main__':
    keyring.set_keyring(KEYRING_BACKEND())
    main()
